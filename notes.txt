Observations regarding HTML templates.
In base.tmpl.html, we defined a base structure which most html pages will hold within our web application. To avoid repetition and which carry out possible mistakes, we define a structure which has placeholder "title" and "main" blocks. When we actually want to write an html page, we will just execute the base template, passing as arguments (or loading into the template) the actual html blocks we want to put in place. Note that the "main" block is pretty much unlimited.

In order to actually execute these templates, we must first create a string slice with all the absolute or relative paths to both the base template and the "main" and "title blocks (its important that the first element MUST be the base template). Then, those templates and blocks are loaded using the ParseFiles function from the template package (which is part of the Go standard library) passing the slice as an argument. This returns a Template object, which holds an ExecuteTemplate method that takes an io.Writer object, the name of the template to be executed (in this case, "base"), and a list of arguments to be passed, and writes the template into the io.Writer object, replacing placeholders with their actual values.


Note on the usage of Handle vs HandleFunc in main.go. Both take a pattern to match in their first argument, the difference being in their second argument. While HandleFunc takes a function which takes an http.ResponseWriter and an http.Request and returns void, Handle takes an object that satisfies the interface http.Handler, that is, an object that implements a ServeHTTP(w http.ResponseWriter, r *http.Request) method. So they are essentially the same, but Handle is typically used when another function had created the http.Handler for us, whereas the functions passed to HandleFunc are usually user-generated. 
In fact, the implementation for HandleFunc involves wrapping the function passed as an argument into an http.Handler.
Another approach that also illustrates how these are equivalent is using the HandlerFunc adapter. HandlerFunc takes a function with the signature of ServeHTTP and returns a Handler whose ServeHTTP method is the given function. In that sense, the HandleFunc method is just syntactic sugar that transforms a function to a handler and registers it in one step.


Note on the usage of http.ServeFile() function. This is useful when, rather than setting up a fileserver for a whole directory of files (or possibly more directories, like the one we have set up for the application), you want to set up a handler that always returns the same file to a given kind of request. This is usually better when the handler should provide an specific file, like just the html for some page.


Something remarkable is that the signature for the ListenAndServe function we've been using actually takes a Handler as its second argument, and we have been passing a servemux instead. This is possible because servemux actually does implement a ServeHTTP method; in fact, we can think of a servemux just as a special kind of handler, which instead of responding to the requests, it passes the request to the appropriate handler. This is very common in Go, we will often chain handlers together.
What actually goes on is that when our server receives an HTTP request, it calls the servemux's ServeHTTP method, which looks up the correct handler to call based on the request method and URL path, and in turn calls the handler's ServeHTTP method. 
In that sense, a Go web application can be though of as a chain of ServeHTTP() methods being called one after another.


Also note that HTTP requests in Go are server concurrently. While this makes Go fast, race conditions must be taken into account when the handlers access shared resources.

Related to the previous point, slog is thread-safe. The same logger can be shared across multiple go routines without needing to worry about race conditions. However, if multiple loggers are put in place, it is important that if they share the writing destination then its Write() method must be thread-safe, too. To avoid forgetting a value after a key in a slog logging call, a pair key-value can be replaced with a single argument slog.Any(key, value). 'Any' can also be replaced by the type of the value for extra type-safety. 


What can we do if we try to apply the DI pattern but the handlers are spread across multiple packages, rather than having them all situated in 'main'? In that case, note that if the application struct was defined in 'main' and it contains the logger, then a handler defined in package 'handlers' cannot directly access the logger, because we can not define them as methods for the application (and therefore access its logger easily) except if the application and the field logger are exported. If they are exported, we can simply import the package where they are defined and create new methods. If they are not, we must use another kind of pattern.

In that case, we can use the closure pattern. A closure is a function that references variables from its outer scope. We say that these variables are captured by the closure, meaning that they can be viewed and altered even after the outer function has returned.
(check why this is needed and why the solution i mentioned above is not enough ??)


Note on the usage of append to generate an slice from scratch in the Latest() method for SnippetModel. Slices are implemented as arrays with extra information like capacity and length. When we exceed the capacity, the array is realloacted with greater memory. It does not only allocate memory for one more element, but it actually duplicates the current capacity (in fact, the first increases will be x2 and at some point it starts progressively using a smaller ratio).
A more efficient approach would probably be to create the slice with an initial size of say 5 or 10 (5 so it only reallocates one time at most). Nonetheless, append is still O(1) amortized and fast enough, so there is no reason to change it as of now.

The importance of using the sql package from Go is that it decouples the actual database being used from the application; the theory is that the database itself can be swapped without rewriting most of the code, just driver-specific minor differences. The general code will not be different if MySQL or PostgreSQL is being used.
